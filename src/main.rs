use axum::{
    extract::{Path, State},
    http::StatusCode,
    response::IntoResponse,
    routing::{delete, get, post, put},
    Json, Router,
};
use serde::{Deserialize, Serialize};
use shuttle_runtime::CustomError;
use sqlx::{FromRow, PgPool};

async fn retrieve(
    Path(id): Path<i32>,
    State(state): State<MyState>,
) -> Result<impl IntoResponse, impl IntoResponse> {
    match sqlx::query_as::<_, (Note, String)>("SELECT notes.*, users.email FROM notes INNER JOIN users ON notes.user_id = users.id WHERE notes.id = $1")
        .bind(id)
        .fetch_one(&state.pool)
        .await
    {
        Ok((note, email)) => Ok((StatusCode::OK, Json((note, email)))),
        Err(e) => Err((StatusCode::BAD_REQUEST, e.to_string())),
    }
}
async fn retrieve_list(
    State(state): State<MyState>,
) -> Result<impl IntoResponse, impl IntoResponse> {
    match sqlx::query_as::<_, Note>("SELECT * FROM notes")
        .fetch_all(&state.pool)
        .await
    {
        Ok(notes) => Ok((StatusCode::OK, Json(notes))),
        Err(e) => Err((StatusCode::BAD_REQUEST, e.to_string())),
    }
}

async fn add(
    State(state): State<MyState>,
    Json(data): Json<NoteNew>,
) -> Result<impl IntoResponse, impl IntoResponse> {
    let new_note = Note {
        id: 0, // Assuming the id will be generated by the database
        ig_username: data.ig_username,
        cosplay_character: data.cosplay_character,
        user_id: 1, // Assuming the user_id will be provided by the user's session
    };

    match sqlx::query_as::<_, Note>("INSERT INTO notes (ig_username, cosplay_character) VALUES ($1, $2) RETURNING id, ig_username, cosplay_character")
        .bind(&new_note.ig_username)
        .bind(&new_note.cosplay_character)
        .fetch_one(&state.pool)
        .await
    {
        Ok(note) => Ok((StatusCode::CREATED, Json(note))),
        Err(e) => Err((StatusCode::BAD_REQUEST, e.to_string())),
    }
}

async fn update(
    Path(id): Path<i32>,
    State(state): State<MyState>,
    Json(data): Json<NoteNew>,
) -> Result<impl IntoResponse, impl IntoResponse> {
    let updated_note = Note {
        id,
        ig_username: data.ig_username,
        cosplay_character: data.cosplay_character,
        user_id: 1, // Assuming the user_id will be provided by the user's session
    };

    match sqlx::query_as::<_, Note>("UPDATE notes SET ig_username = $1, cosplay_character = $2 WHERE id = $3 RETURNING id, ig_username, cosplay_character")
        .bind(&updated_note.ig_username)
        .bind(&updated_note.cosplay_character)
        .bind(&updated_note.id)
        .fetch_one(&state.pool)
        .await
    {
        Ok(note) => Ok((StatusCode::OK, Json(note))),
        Err(e) => Err((StatusCode::BAD_REQUEST, e.to_string())),
    }
}

async fn remove_note(
    Path(id): Path<i32>,
    State(state): State<MyState>,
) -> Result<impl IntoResponse, impl IntoResponse> {
    match sqlx::query("DELETE FROM notes WHERE id = $1")
        .bind(id)
        .execute(&state.pool)
        .await
    {
        Ok(_) => Ok(StatusCode::NO_CONTENT),
        Err(e) => Err((StatusCode::BAD_REQUEST, e.to_string())),
    }
}

#[derive(Clone)]
struct MyState {
    pool: PgPool,
}

#[shuttle_runtime::main]
async fn axum(#[shuttle_shared_db::Postgres] pool: PgPool) -> shuttle_axum::ShuttleAxum {
    sqlx::migrate!()
        .run(&pool)
        .await
        .map_err(CustomError::new)?;

    let state = MyState { pool };
    let router = Router::new()
        .route("/note", post(add))
        .route("/notes", get(retrieve_list))
        .route("/note/:id", get(retrieve))
        .route("/note/:id", put(update))
        .route("/note/:id", delete(remove_note))
        .with_state(state);

    Ok(router.into())
}

#[derive(Deserialize)]
struct NoteNew {
    pub ig_username: String,
    pub cosplay_character: String,
}

#[derive(Serialize, FromRow)]
struct Note {
    pub id: i32,
    pub ig_username: String,
    pub cosplay_character: String,
    pub user_id: i32,
}
